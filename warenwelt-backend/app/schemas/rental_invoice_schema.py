from pydantic import BaseModel, Field
from decimal import Decimal
from datetime import date
from typing import Optional

from app.models.rental_invoice_model import RentalInvoiceStatusEnum
# For embedding related object info:
# Assuming RentalContractRead includes basic shelf and tenant info, or use more specific basic schemas.
from .rental_contract_schema import RentalContractRead
from .supplier_schema import SupplierBasicRead # Defined in rental_contract_schema for now, or import if moved
from .shelf_schema import ShelfBasicRead


class RentalInvoiceBase(BaseModel):
    rental_contract_id: int = Field(..., example=1)
    invoice_date: date = Field(default_factory=date.today, example=date.today().isoformat())
    due_date: date = Field(..., example=date(date.today().year, date.today().month + 1, 15).isoformat() if date.today().month < 12 else date(date.today().year + 1, 1, 15).isoformat() ) # Example: 15th of next month

    billing_period_start: date = Field(..., example=date(date.today().year, date.today().month, 1).isoformat()) # Example: Start of current month
    billing_period_end: date = Field(..., example=date(date.today().year, date.today().month + 1, 1) - timedelta(days=1) if date.today().month < 12 else date(date.today().year, 12, 31)) # Example: End of current month

    amount_due: Decimal = Field(..., gt=0, decimal_places=2, example=50.00)
    status: RentalInvoiceStatusEnum = Field(default=RentalInvoiceStatusEnum.DRAFT, example=RentalInvoiceStatusEnum.DRAFT.value)
    notes: Optional[str] = Field(None, example="Monthly rent for Regal A1")
    invoice_number: Optional[str] = Field(None, max_length=50, example="RENT-2024-07-001") # Optional on create, can be auto-generated

    # Fields to be populated by the service from the contract, not directly in create schema usually
    # tenant_supplier_id: int
    # shelf_id: int

    class Config:
        # Add timedelta for example calculation
        from datetime import timedelta # Needs to be at the top level of the module for Pydantic to use it here

class RentalInvoiceCreate(RentalInvoiceBase):
    # tenant_supplier_id and shelf_id will be derived from rental_contract_id in the service layer
    # invoice_number can also be generated by the service if not provided
    pass

class RentalInvoiceUpdate(BaseModel):
    # Most fields can be optional during an update
    invoice_date: Optional[date] = None
    due_date: Optional[date] = None
    billing_period_start: Optional[date] = None
    billing_period_end: Optional[date] = None
    amount_due: Optional[Decimal] = Field(None, gt=0, decimal_places=2)
    amount_paid: Optional[Decimal] = Field(None, ge=0, decimal_places=2) # Allow setting amount paid
    status: Optional[RentalInvoiceStatusEnum] = None
    notes: Optional[str] = None
    invoice_number: Optional[str] = Field(None, max_length=50) # Allow updating if necessary, e.g. correcting a manual one


class RentalInvoiceRead(RentalInvoiceBase):
    id: int

    # These IDs are part of the RentalInvoice model itself (denormalized)
    tenant_supplier_id: int
    shelf_id: int

    amount_paid: Optional[Decimal] = Field(default=Decimal("0.00"), decimal_places=2)

    # For displaying related data, we can embed their "Read" schemas
    # The actual RentalContractRead might be too verbose here, consider a RentalContractBasicRead.
    # For now, using the full one.
    rental_contract: Optional[RentalContractRead] = None

    # These are redundant if RentalContractRead already contains ShelfBasicRead and SupplierBasicRead
    # and if rental_contract field is populated.
    # However, having them directly can be convenient if rental_contract is not always expanded.
    # Let's assume they are populated from the invoice's direct FKs for now.
    tenant: Optional[SupplierBasicRead] = None # Populated from invoice.tenant_supplier_id
    shelf: Optional[ShelfBasicRead] = None   # Populated from invoice.shelf_id

    class Config:
        orm_mode = True
        # from_attributes = True # For Pydantic v2
        # Need to ensure timedelta is available if used in examples within Config
        # It's better to have examples as static strings if they are complex like that.
        # Correcting example values to be static strings.
        # The example values for dates in RentalInvoiceBase should be static strings.
        # Pydantic examples are for documentation, not live calculation.
        # Let's fix the examples in RentalInvoiceBase directly in the file creation.
        pass

# Corrected RentalInvoiceBase with static examples
RentalInvoiceBase.__fields__['due_date'].field_info.extra['example'] = '2024-08-15'
RentalInvoiceBase.__fields__['billing_period_start'].field_info.extra['example'] = '2024-07-01'
RentalInvoiceBase.__fields__['billing_period_end'].field_info.extra['example'] = '2024-07-31'
