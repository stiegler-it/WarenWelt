"""create_shelf_and_rental_contract_tables

Revision ID: create_shelf_rental_tables
Revises: mvp_initial_tables
Create Date: 2024-01-01 00:00:01.000000

"""
from alembic import op
import sqlalchemy as sa
# Ensure correct import paths if models are used directly for enums,
# or define enums explicitly if not importing from models.
# For this migration, we'll use the string names of the enums as they are defined in the models.
# from app.models.shelf_model import ShelfStatusEnum -> Not directly used, SA Enum takes string name
# from app.models.rental_contract_model import RentalContractStatusEnum -> Not directly used

# revision identifiers, used by Alembic.
revision = 'create_shelf_rental_tables'
down_revision = 'mvp_initial_tables'
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###

    # ShelfStatusEnum Type (for PostgreSQL, SQLite handles enums differently)
    # shelf_status_enum_type = sa.Enum('AVAILABLE', 'RENTED', 'MAINTENANCE', name='shelf_status_enum')
    # shelf_status_enum_type.create(op.get_bind(), checkfirst=True)
    # No, SQLAlchemy creates the type if it's part of the column definition and the DB supports it (like PostgreSQL)

    op.create_table('shelves',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=100), nullable=False),
    sa.Column('location_description', sa.String(length=255), nullable=True),
    sa.Column('size_description', sa.String(length=100), nullable=True),
    sa.Column('monthly_rent_price', sa.DECIMAL(precision=10, scale=2), nullable=False),
    # For PostgreSQL, SQLAlchemy will attempt to CREATE TYPE shelf_status_enum AS ENUM(...)
    # For SQLite, it will be a CHECK constraint on a VARCHAR.
    sa.Column('status', sa.Enum('AVAILABLE', 'RENTED', 'MAINTENANCE', name='shelf_status_enum'), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=True, server_default=sa.text('true')),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_shelves_id'), 'shelves', ['id'], unique=False)
    op.create_index(op.f('ix_shelves_name'), 'shelves', ['name'], unique=True)

    # RentalContractStatusEnum Type (for PostgreSQL)
    # rental_contract_status_enum_type = sa.Enum('ACTIVE', 'EXPIRED', 'TERMINATED', 'PENDING', name='rental_contract_status_enum')
    # rental_contract_status_enum_type.create(op.get_bind(), checkfirst=True)

    op.create_table('rental_contracts',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('contract_number', sa.String(length=50), nullable=False),
    sa.Column('shelf_id', sa.Integer(), nullable=False),
    sa.Column('tenant_supplier_id', sa.Integer(), nullable=False),
    sa.Column('start_date', sa.Date(), nullable=False),
    sa.Column('end_date', sa.Date(), nullable=False),
    sa.Column('rent_price_at_signing', sa.DECIMAL(precision=10, scale=2), nullable=False),
    sa.Column('payment_terms', sa.String(length=255), nullable=True),
    sa.Column('status', sa.Enum('ACTIVE', 'EXPIRED', 'TERMINATED', 'PENDING', name='rental_contract_status_enum'), nullable=False),
    sa.ForeignKeyConstraint(['shelf_id'], ['shelves.id'], ),
    sa.ForeignKeyConstraint(['tenant_supplier_id'], ['suppliers.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_rental_contracts_id'), 'rental_contracts', ['id'], unique=False)
    op.create_index(op.f('ix_rental_contracts_contract_number'), 'rental_contracts', ['contract_number'], unique=True)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_rental_contracts_contract_number'), table_name='rental_contracts')
    op.drop_index(op.f('ix_rental_contracts_id'), table_name='rental_contracts')
    op.drop_table('rental_contracts')

    op.drop_index(op.f('ix_shelves_name'), table_name='shelves')
    op.drop_index(op.f('ix_shelves_id'), table_name='shelves')
    op.drop_table('shelves')

    # Explicitly drop ENUM types for PostgreSQL
    # This needs to be done carefully. SQLAlchemy's Enum.drop might be preferred.
    # op.execute("DROP TYPE IF EXISTS shelf_status_enum;")
    # op.execute("DROP TYPE IF EXISTS rental_contract_status_enum;")
    # Using SQLAlchemy's way to drop enums if they were created by SQLAlchemy
    sa.Enum(name='shelf_status_enum').drop(op.get_bind(), checkfirst=False)
    sa.Enum(name='rental_contract_status_enum').drop(op.get_bind(), checkfirst=False)
    # ### end Alembic commands ###
