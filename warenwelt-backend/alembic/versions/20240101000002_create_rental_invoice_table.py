"""create_rental_invoice_table

Revision ID: create_rental_invoice_table_rev
Revises: create_shelf_rental_tables
Create Date: 2024-01-01 00:00:02.000000

"""
from alembic import op
import sqlalchemy as sa
# Enum definition is directly in the sa.Column, so no specific import from model needed here for the enum type itself.

# revision identifiers, used by Alembic.
revision = 'create_rental_invoice_table_rev'
down_revision = 'create_shelf_rental_tables' # This was the revision ID for shelf and rental_contract tables
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###

    # RentalInvoiceStatusEnum Type (for PostgreSQL, SQLite handles enums with CHECK constraints)
    # rental_invoice_status_enum_type = sa.Enum('DRAFT', 'OPEN', 'PAID', 'OVERDUE', 'CANCELLED', name='rental_invoice_status_enum')
    # rental_invoice_status_enum_type.create(op.get_bind(), checkfirst=True)
    # SQLAlchemy handles this if type is part of column def for supported DBs.

    op.create_table('rental_invoices',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('invoice_number', sa.String(length=50), nullable=False),
    sa.Column('rental_contract_id', sa.Integer(), nullable=False),
    sa.Column('tenant_supplier_id', sa.Integer(), nullable=False),
    sa.Column('shelf_id', sa.Integer(), nullable=False),
    sa.Column('invoice_date', sa.Date(), nullable=False),
    sa.Column('due_date', sa.Date(), nullable=False),
    sa.Column('billing_period_start', sa.Date(), nullable=False),
    sa.Column('billing_period_end', sa.Date(), nullable=False),
    sa.Column('amount_due', sa.DECIMAL(precision=10, scale=2), nullable=False),
    sa.Column('amount_paid', sa.DECIMAL(precision=10, scale=2), nullable=True, server_default=sa.text("'0.00'")), # Default for SQL
    sa.Column('status', sa.Enum('DRAFT', 'OPEN', 'PAID', 'OVERDUE', 'CANCELLED', name='rental_invoice_status_enum'), nullable=False),
    sa.Column('notes', sa.Text(), nullable=True),
    sa.ForeignKeyConstraint(['rental_contract_id'], ['rental_contracts.id'], name=op.f('fk_rental_invoices_rental_contract_id_rental_contracts')),
    sa.ForeignKeyConstraint(['shelf_id'], ['shelves.id'], name=op.f('fk_rental_invoices_shelf_id_shelves')),
    sa.ForeignKeyConstraint(['tenant_supplier_id'], ['suppliers.id'], name=op.f('fk_rental_invoices_tenant_supplier_id_suppliers')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_rental_invoices'))
    )
    op.create_index(op.f('ix_rental_invoices_id'), 'rental_invoices', ['id'], unique=False)
    op.create_index(op.f('ix_rental_invoices_invoice_number'), 'rental_invoices', ['invoice_number'], unique=True)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_rental_invoices_invoice_number'), table_name='rental_invoices')
    op.drop_index(op.f('ix_rental_invoices_id'), table_name='rental_invoices')
    op.drop_table('rental_invoices')

    # Explicitly drop ENUM type for PostgreSQL.
    # This ensures the type is removed from the database when downgrading.
    sa.Enum(name='rental_invoice_status_enum').drop(op.get_bind(), checkfirst=False)
    # ### end Alembic commands ###
