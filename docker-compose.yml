version: '3.8'

services:
  api:
    build:
      context: ./warenwelt-backend
      dockerfile: Dockerfile
    container_name: warenwelt-api
    # command: uvicorn app.main:app --host 0.0.0.0 --port 8000 # Overridden by entrypoint.sh
    volumes:
      - backend_data:/app/data # Volume for SQLite DB and other persistent data
      # For development, you might want to mount the code directly:
      # - ./warenwelt-backend:/app
    ports:
      - "8000:8000"
    env_file:
      - .env # Loads environment variables from .env file in the project root
    environment:
      # DATABASE_URL is set to use the volume.
      # If .env file has DATABASE_URL, it will override this.
      # For SQLite in a volume, the path inside the container needs to be consistent.
      # The Dockerfile WORKDIR is /app, so /app/data/test.db seems reasonable.
      - DATABASE_URL=sqlite:///data/test.db
      # SECRET_KEY should be in .env
      # - PYTHONUNBUFFERED=1 # Already in Dockerfile
      # - PYTHONDONTWRITEBYTECODE=1 # Already in Dockerfile
    networks:
      - warenwelt-network
    restart: unless-stopped

  web:
    build:
      context: ./warenwelt-frontend
      dockerfile: Dockerfile
      args:
        # This allows passing the API URL during build time to the frontend.
        # It can be overridden by an environment variable with the same name at runtime
        # if the Nginx setup or entrypoint script is adapted to handle it.
        # For Vite, this sets the build-time env var.
        VITE_API_BASE_URL: ${VITE_FRONTEND_API_BASE_URL:-http://api:8000/api/v1} # Default if not set in .env
    container_name: warenwelt-web
    ports:
      - "8080:80" # Exposes Nginx on port 8080 of the host
    depends_on:
      - api
    networks:
      - warenwelt-network
    restart: unless-stopped

volumes:
  backend_data: # Defines the named volume for backend persistent data

networks:
  warenwelt-network:
    driver: bridge
